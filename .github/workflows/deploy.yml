name: CI/CD Pipeline

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Archive build files
        run: tar -czf build.tar.gz ./.output

      - name: Upload build files
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: build.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build files
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: ./build

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Set up VPN
        run: |
          echo "${{ secrets.VPN_CONFIG }}" > vpn-config.ovpn
          echo "${{ secrets.VPN_USERNAME }}" > vpn-credentials
          echo "${{ secrets.VPN_PASSWORD }}" >> vpn-credentials
          sudo openvpn --config vpn-config.ovpn --auth-user-pass vpn-credentials --daemon

      - name: Wait for VPN to connect
        run: sleep 20

      - name: Copy build files to VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 $REMOTE_HOST >> ~/.ssh/known_hosts

          scp -P 22 -i ~/.ssh/id_rsa build/build.tar.gz $REMOTE_USER@$REMOTE_HOST:/home/sysadmin/classCraftWeb

      - name: Deploy Docker container on VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          ssh -p 22 -i ~/.ssh/id_rsa $REMOTE_USER@$REMOTE_HOST << 'EOF'
            cd /home/sysadmin/classCraftWeb
            tar -xzf build.tar.gz

            docker stop classCraftWeb || true
            docker rm classCraftWeb || true
            docker build -t classCraftImg:latest .
            docker run -d --name classCraftWeb -p 80:80 classCraftImg:latest
          EOF
